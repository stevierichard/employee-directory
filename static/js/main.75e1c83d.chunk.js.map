{"version":3,"sources":["component/Nav/Nav.js","component/Utils/API.js","component/Table/Table.js","component/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","class","className","id","placeholder","value","search","onChange","handleInputChange","axios","get","Table","scope","onClick","sortByFirstName","sortByLastName","employees","map","employee","key","cell","src","photo","name","first","last","location","city","matches","filter","result","substring","length","toLowerCase","Container","state","getEmployees","API","then","res","setState","data","results","sorted","sort","a","b","nameA","toUpperCase","nameB","handleChange","event","target","this","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75e1c83d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Nav = (props) => {\r\n  return (\r\n    <div class=\"jumbotron jumbotron-fluid bg-info\">\r\n      <div class=\"container\">\r\n        <h1 class=\"display-5 text\">Employee Directory</h1>\r\n        <form className=\"form-group\">\r\n          <h4>Search for Employee:</h4>\r\n          <input\r\n            className=\"form-control mb-4\"\r\n            id=\"name\"\r\n            placeholder=\"Search By FirstName Here\"\r\n            value={props.search}\r\n            onChange={props.handleInputChange}\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  search: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=50\");\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport employees from \"../Utils/API\";\r\n\r\nconst Table = (props) => {\r\n  if (typeof props.search === \"\") {\r\n    return (\r\n      <table className=\"table table-bordered\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th></th>\r\n            <th scope=\"col\">\r\n              <a onClick={() => props.sortByFirstName()}> First Name </a>\r\n            </th>\r\n            <th scope=\"col\">\r\n              <a onClick={() => props.sortByLastName()}> Last Name </a>\r\n            </th>\r\n            <th scope=\"col\">Phone Number</th>\r\n            <th scope=\"col\">Street Address</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.employees.map((employee) => (\r\n            <tr key={employee.cell}>\r\n              <th scope=\"row\">\r\n                <img src={employee.photo} />\r\n              </th>\r\n              <td>{employee.name.first}</td>\r\n              <td>{employee.name.last}</td>\r\n              <td>{employee.cell}</td>\r\n              <td>{employee.location.city}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  } else if (typeof props.search === \"string\") {\r\n    let matches = props.employees.filter((result) => {\r\n      return (\r\n        (result.name.first + \" \" + result.name.last)\r\n          .substring(0, props.search.length)\r\n          .toLowerCase() === props.search.toLowerCase()\r\n      );\r\n    });\r\n    return (\r\n      <table className=\"table table-bordered\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th></th>\r\n            <th scope=\"col\">\r\n              <a onClick={() => props.sortByFirstName()}>\r\n                {\" \"}\r\n                First Name (A - Z){\" \"}\r\n              </a>\r\n            </th>\r\n            <th scope=\"col\">\r\n              <a onClick={() => props.sortByLastName()}> Last Name (A - Z) </a>\r\n            </th>\r\n            <th scope=\"col\">Phone Number</th>\r\n            <th scope=\"col\">Street Address</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {matches.map((employee) => (\r\n            <tr key={employee.cell}>\r\n              <th scope=\"row\">\r\n                <img src={employee.photo} />\r\n              </th>\r\n              <td>{employee.name.first}</td>\r\n              <td>{employee.name.last}</td>\r\n              <td>{employee.cell}</td>\r\n              <td>{employee.location.city}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport Nav from \"../Nav/Nav\";\r\nimport Table from \"../Table/Table\";\r\nimport API from \"../Utils/API\";\r\n\r\nclass Container extends Component {\r\n  state = {\r\n    employees: [],\r\n    search: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    // allows function to be ran when component first renders\r\n    this.getEmployees();\r\n  }\r\n\r\n  getEmployees = () => {\r\n    API.search().then((res) => {\r\n      this.setState({ employees: res.data.results });\r\n    });\r\n  };\r\n\r\n  //create sorting function for first and last name\r\n  sortByFirstName = () => {\r\n    const sorted = this.state.employees.sort(compare);\r\n    function compare(a, b) {\r\n      const nameA = a.name.first.toUpperCase();\r\n      const nameB = b.name.first.toUpperCase();\r\n\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    }\r\n    this.setState({ employees: sorted });\r\n  };\r\n\r\n  sortByFirstName = () => {\r\n    const sorted = this.state.employees.sort(compare);\r\n    function compare(a, b) {\r\n      const nameA = a.name.first.toUpperCase();\r\n      const nameB = b.name.first.toUpperCase();\r\n\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      } else if (nameA < nameB) {\r\n        return -1;\r\n      } else return 0;\r\n    }\r\n    this.setState({ employees: sorted });\r\n  };\r\n\r\n  sortByLastName = () => {\r\n    const sorted = this.state.employees.sort(compare);\r\n    function compare(a, b) {\r\n      const nameA = a.name.last.toUpperCase();\r\n      const nameB = b.name.last.toUpperCase();\r\n\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    }\r\n    this.setState({ employees: sorted });\r\n  };\r\n\r\n  handleChange = (name) => {\r\n    this.setState({ search: name });\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    this.handleChange(event.target.value);\r\n    // event.target\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Nav\r\n          handleInputChange={this.handleInputChange}\r\n          handleChange={this.handleChange}\r\n          search={this.state.search}\r\n        />\r\n\r\n        <Table\r\n          employees={this.state.employees}\r\n          sortByFirstName={this.sortByFirstName}\r\n          sortByLastName={this.sortByLastName}\r\n          handleChange={this.handleChange}\r\n          search={this.state.search}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport Container from \"./component/Container/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}